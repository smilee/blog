<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>UX + Development</title>
  
  <subtitle>= Love</subtitle>
  <link href="/blog/atom.xml" rel="self"/>
  
  <link href="https://uxplus.dev/blog/"/>
  <updated>2019-05-16T03:27:21.627Z</updated>
  <id>https://uxplus.dev/blog/</id>
  
  <author>
    <name>Seungmin Lee</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>React 기초: 소개</title>
    <link href="https://uxplus.dev/blog/2019/05/15/react-basics-introduction/"/>
    <id>https://uxplus.dev/blog/2019/05/15/react-basics-introduction/</id>
    <published>2019-05-15T08:31:21.000Z</published>
    <updated>2019-05-16T03:27:21.627Z</updated>
    
    <content type="html"><![CDATA[<p>React를 이용한 개발을 시작해보고 싶지만 어디부터 시작해야할지 모르겠어서 엄두도 못내고 있던 여러분을 환영합니다. 이번 글은 React와 React를 사용하는 다양한 방법 등 기초적인 부분을 다룹니다. <a id="more"></a></p><h2 id="React와-ReactDOM"><a href="#React와-ReactDOM" class="headerlink" title="React와 ReactDOM"></a>React와 ReactDOM</h2><p>React는 관심사의 분리를 통해 다양한 플랫폼에서 쓰기 편한 구조로 설계되어있습니다. 웹 환경을 위해서는 ReactDOM, 모바일 환경을 위해서는 React Native 등, 각 플랫폼에 맞는 렌더링 담당 패키지를 React와 같이 사용할 수 있습니다. 이 시리즈에서는 웹 환경에 관련된 이야기를 하고자 하니 React와 ReactDOM을 살펴보겠습니다.</p><table><thead><tr><th>이름</th><th>정의</th><th>역할</th></tr></thead><tbody><tr><td><a href="https://reactjs.org/" target="_blank" rel="noopener">React</a></td><td>유저 인터페이스를 만들기 위한 JavaScript 라이브러리</td><td>컴포넌트와 컴포넌트가 어떻게 동작하는지 정의하는 역할</td></tr><tr><td><a href="https://reactjs.org/docs/react-dom.html" target="_blank" rel="noopener">ReactDOM</a></td><td>React를 위한 JavaScript 패키지</td><td>React 엘리먼트를 DOM에 렌더링하는 역할과 React 모델 밖으로 나가기 위한 비상구 역할</td></tr></tbody></table><h2 id="시작하기"><a href="#시작하기" class="headerlink" title="시작하기"></a>시작하기</h2><p>리액트를 사용하는 방법은 크게 두가지가 있습니다. 간단한 맛보기를 위해서는 <a href="https://gist.github.com/gaearon/6668a1f6986742109c00a581ce704605" target="_blank" rel="noopener">웹사이트에 React를 추가</a>하는 방법이 있지만, 대부분의 경우, <a href="https://reactjs.org/docs/create-a-new-react-app.html" target="_blank" rel="noopener">툴체인을 사용</a>합니다. 툴체인은 다음과 같이 용도에 맞춰 사용합니다:</p><table><thead><tr><th>용도</th><th>툴체인</th></tr></thead><tbody><tr><td>배우는 단계이거나 SPA 제작</td><td><a href="https://github.com/facebook/create-react-app" target="_blank" rel="noopener">Create React App</a></td></tr><tr><td>Node.js로 SSR이 되는 웹사이트 제작</td><td><a href="https://nextjs.org/" target="_blank" rel="noopener">Next.js</a></td></tr><tr><td>정적 웹페이지가 주인 웹사이트 제작</td><td><a href="https://www.gatsbyjs.org/" target="_blank" rel="noopener">Gatsby</a></td></tr><tr><td>컴포넌트 라이브러리 작업이나 기존 코드베이스 위에 작업</td><td>Neutrino, nwb, Parcel, Razzle 등</td></tr></tbody></table><p>위에 있는 옵션이 맘에 안드시는 분은 툴체인을 직접 만들어서 사용할 수도 있습니다. 흔히 패키지 매니저(Yarn 또는 npm), 번들러(webpack 또는 Parcel), 그리고 컴파일러(Babel)의 조합으로 만드는데, 이것이 가능한 수준이라면 이 글은 그만 읽고 어서 코드를 짜는것을 추천합니다.</p><p>패키지 매니저나 번들러는 패키지를 사용할 때 편하다면, Babel은 ES6이상의 JavaScript 코드를 대부분의 브라우저가 이해할 수 있는 ES5로 변환해주니  ES6를 시작으로 급격하게 변화해온 최신 JavaScript 사용자에게 요긴하게 쓰입니다. 물론 어떤 이는 그냥 ES5를 쓰면 되지 않냐고 물을 수 있습니다. 하지만 왜 그런 제한을 둬야만 하는지 생각해 보시는 것을 권유드립니다.</p><h2 id="Create-React-App"><a href="#Create-React-App" class="headerlink" title="Create React App"></a>Create React App</h2><p>위에서 언급된 툴체인 중 흔히 쓰이는 Create React App을 사용하여 프로젝트를 만드는 경우, 생성되는 프로젝트 구조는 다음과 같습니다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">my-app</span><br><span class="line">├── README.md</span><br><span class="line">├── node_modules</span><br><span class="line">├── package.json</span><br><span class="line">├── .gitignore</span><br><span class="line">├── public</span><br><span class="line">│   ├── favicon.ico</span><br><span class="line">│   ├── index.html</span><br><span class="line">│   └── manifest.json</span><br><span class="line">└── src</span><br><span class="line">    ├── App.css</span><br><span class="line">    ├── App.js</span><br><span class="line">    ├── App.test.js</span><br><span class="line">    ├── index.css</span><br><span class="line">    ├── index.js</span><br><span class="line">    ├── logo.svg</span><br><span class="line">    └── serviceWorker.js</span><br></pre></td></tr></table></figure><ul><li>README.md<ul><li>프로젝트 목표 및 사용법 등을 설명</li></ul></li><li>node_modules<ul><li>프로젝트가 사용하는 패키지</li><li>용량이 커서 .gitignore에 이 폴더를 추가하는 경우가 흔하다</li></ul></li><li><a href="https://docs.npmjs.com/files/package.json" target="_blank" rel="noopener">package.json</a><ul><li>프로젝트 정보</li><li>프로젝트에 사용되는 패키지에 대한 정보를 가지고 있기 때문에 다른 컴퓨터에서 필요한 패키지를 직접 다운로드 받게할 수 있다</li></ul></li><li><a href="https://git-scm.com/docs/gitignore" target="_blank" rel="noopener">.gitignore</a><ul><li>일부러 신경쓰지 않는 파일의 관리</li></ul></li><li>public<ul><li>정적 파일 (이미지 등)을 담아두는 공간</li></ul></li><li>src<ul><li>소스코드를 담아두는 공간<br>이렇게 생성된 프로젝트는 사용하는 패키지 매니저에 따라 <code>npm start</code> 또는 <code>yarn start</code> 명령을 통해 개발모드로 실행할 수 있습니다. 이 프로세스는 여느 프로세스와 마찬가지로 <code>ctrl + c</code> 명령으로 종료할 수 있습니다. 보다 상세한 설명은 <a href="https://github.com/facebook/create-react-app" target="_blank" rel="noopener">공식 README.md</a>에서 확인할 수 있습니다.</li></ul></li></ul><h2 id="모듈-시스템"><a href="#모듈-시스템" class="headerlink" title="모듈 시스템"></a>모듈 시스템</h2><p>앞서 ES2015(ES6)를 사용해도 브라우저가 알아들을 수 있도록 Babel을 쓴다고 했습니다. 하지만 필요한 패키지를 찾아서 쓰다보면 가끔 <code>[...] has no default export</code>이라는 에러메시지를 만날 때가 있습니다. 이는 아마도 그 패키지가 다른 모듈 시스템(CommonJS)을 사용하고 있어서일것입니다.</p><table><thead><tr><th>CommonJS 모듈 시스템 (Node.js)</th><th>ES6 모듈 시스템</th></tr></thead><tbody><tr><td>require (node_modules에서 해당 모듈을 찾는다)</td><td>import</td></tr><tr><td>module.exports</td><td>export</td></tr></tbody></table><p>하지만 현재 Babel은 <code>import</code>와 <code>export</code>를 컴파일 할 수 있고, <a href="https://nodejs.org/api/esm.html#esm_no_code_require_code_code_exports_code_code_module_exports_code_code_filename_code_code_dirname_code" target="_blank" rel="noopener">Node.js v12.2.0</a>에서는 import를 지원합니다. 그러므로 CommonJS 모듈 시스템을 사용하는 패키지는 관리가 안되고 있을 가능성이 높고 그 와중에 비슷한 기능의 다른 패키지가 생겼을 가능성이 높으므로 대안도 고민해볼만합니다.</p><p>이제 Create React App으로 생성한 프로젝트 구성에 대해 알았으니 소스코드를 작성해 보고 싶지는 않으신가요? 다음 글에서는 리액트 컴포넌트에 대한 내용으로 찾아뵙겠습니다.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;React를 이용한 개발을 시작해보고 싶지만 어디부터 시작해야할지 모르겠어서 엄두도 못내고 있던 여러분을 환영합니다. 이번 글은 React와 React를 사용하는 다양한 방법 등 기초적인 부분을 다룹니다.
    
    </summary>
    
      <category term="JavaScript" scheme="https://uxplus.dev/blog/categories/JavaScript/"/>
    
      <category term="React" scheme="https://uxplus.dev/blog/categories/JavaScript/React/"/>
    
    
      <category term="JavaScript" scheme="https://uxplus.dev/blog/tags/JavaScript/"/>
    
      <category term="React" scheme="https://uxplus.dev/blog/tags/React/"/>
    
      <category term="ReactDOM" scheme="https://uxplus.dev/blog/tags/ReactDOM/"/>
    
      <category term="Webpack" scheme="https://uxplus.dev/blog/tags/Webpack/"/>
    
      <category term="Babel" scheme="https://uxplus.dev/blog/tags/Babel/"/>
    
      <category term="ES5" scheme="https://uxplus.dev/blog/tags/ES5/"/>
    
      <category term="ES6" scheme="https://uxplus.dev/blog/tags/ES6/"/>
    
      <category term="ES2015" scheme="https://uxplus.dev/blog/tags/ES2015/"/>
    
      <category term="CommonJS" scheme="https://uxplus.dev/blog/tags/CommonJS/"/>
    
      <category term="create-react-app" scheme="https://uxplus.dev/blog/tags/create-react-app/"/>
    
      <category term="Create React App" scheme="https://uxplus.dev/blog/tags/Create-React-App/"/>
    
      <category term="module systems" scheme="https://uxplus.dev/blog/tags/module-systems/"/>
    
  </entry>
  
  <entry>
    <title>제너럴리스트로 가는 길</title>
    <link href="https://uxplus.dev/blog/2019/04/27/becoming-a-generalist/"/>
    <id>https://uxplus.dev/blog/2019/04/27/becoming-a-generalist/</id>
    <published>2019-04-27T01:02:07.000Z</published>
    <updated>2019-05-17T02:05:38.637Z</updated>
    
    <content type="html"><![CDATA[<!-- excerpt --></p><p>저는 학교에서 디자인을 전공했습니다. 와이어프레임도 만들어보고 그래픽 툴도 다뤄보고, 조금이지만 모션 그래픽도 해보았는데요. 물론 이런 것들은 제가 받은 교육의 결과물이고, 어떤 기준으로 이런 결과물을 만들어야 하는지 위주로 디자인을 배웠습니다. 졸업 후엔 디자이너로 취업을 했고요.</p><p>사실 취업하기 전에 개인 포트폴리오를 만들어보려고 ‘퍼블리싱’이라고 불리는 것을 배웠습니다. 그때는 일반적으로 HTML, CSS, 그리고 jQuery정도를 할 줄 아는 사람을 퍼블리셔라고 불렀던 것 같아요. 그런데 작은 기업에서 일을 하다 보니 일손이 부족해 api 연결 등을 하나둘씩 했고, 어느 순간 프론트엔드 개발자로 전향한 자신을 발견했습니다.</p><blockquote><p>“Technology alone is not enough. It’s technology married with the liberal arts, married with the humanities, that yields us the results that make our hearts sing.”</p></blockquote><p>재학 당시 들었던 스티브 잡스의 이 한 마디가 세계적인 트렌드를 일으켰습니다. 2011년 3월, 애플 아이패드 2 키노트에서 했던 이야기인데요. 기술과 인문학의 융합이 화제가 되며 여러 대학에서 융합형 인재를 키울 목적으로 전형을 신설하는 등의 일이 있었고, 저도 ‘대세’인 융합형 인재, 곧 제너럴리스트가 되고 싶었습니다.</p><p>융합이 화두가 되기 전에도 ‘통섭’이라는 개념이 있었습니다. 1998년에 출판된 &lt;통섭: 지식의 통합(E.O.윌슨)&gt;에서는 자연학과 인문학 등 여러 분야의 전문가가 하나의 연구를 함께 하면서 서로 시야를 공유하는 것의 중요성을 이야기하고 있습니다.</p><p>그보다 더 거슬러 올라가 1968년작 &lt;예술의 언어들: 기호 이론을 향하여(넬슨 굿맨)&gt;에서는 예술도 자연과학에 쓰이는 기호처럼 의사소통이나 표현방식이라는 관점도 있었습니다. 이렇게 서로 만날 일이 전혀 없어 보이는 분야도 자세히 살폈을 때 닮은꼴이라면, 그 연결고리의 전문가가 곧 제너럴리스트는 아닌가 하는 생각을 해봤습니다.</p><p><img src="https://cdn-images-1.medium.com/max/1200/0*zFj5ZUImAVahWR9C" alt="디자인 머리와 개발 머리"><br>디자인을 넘어 개발도 이해하는 제너럴리스트가 되기 위해 담당업무 분야도 바꾸고 다양한 개발자 모임에 참여했습니다. 그 결과 디자이너 및 개발자 양쪽 모두와 의사소통하고 공감할 수 있었습니다. 그리고 디자인과 개발, 양쪽을 이해하는 제너럴리스트의 역할은 중간에서 양쪽 모두와 협력하는 것이라고 생각했습니다. 매우 이상적이죠.</p><p>하지만 시간도 부족한데 가치의 충돌이 일어나는 것이 일상이었습니다. 사용자에게 최적화된 커스텀 디자인을 입힐것안지 아니면 이미 개발되어있는 것에 디자인을 맞출 것인지 협의하는 과정에서 저는 고통을 겪어야만 했습니다. 왜냐하면, 저는 둘 다 중요하다고 생각하지만 하나에 집중해야만 하는 상황에 자주 놓이게 되었기 때문이죠. 선택의 고통을 즐길 준비가 된 분은 제너럴리스트의 길도 잘 감당하시리라 생각됩니다. 물론 저는 이 고통을 즐길 정도로 초월한 사람은 아니라 꽤 괴로웠습니다.</p><p>그래도 제너럴리스트가 하고 싶었습니다. 왜냐하면, 저는 호기심이 많은 성격이며 한 가지만 계속 반복하는 것을 견디지 못하기 때문입니다. 성격과 직업만족도가 서로 의미있는 관계가 있다는 관련 논문들이 제 생각을 뒷받침해주었습니다. 성격과 직업에서 요구되는 능력이 잘 맞으면 조금이라도 더 행복해질 것 같았습니다. 그래서 선택의 괴로움은 저의 능력이 뒷받침되면 점차 사라지리라 믿으며 제너럴리스트의 길을 선택했습니다.</p><p>일단 현실적으로 요구되는 제너럴리스트와 제가 되고 싶은 제너럴리스트를 정의할 필요를 느꼈습니다. 디자인 팀이 나에게 원하는 것, 그리고 엔지니어들이 나에게 바라는 것은 뭘까? 나는 내가 무엇이라고 생각하며, 앞으로는 어떤 사람이 되고 싶은가? 한때 스페셜리스트 분야라고 생각했던 ‘프론트엔드’에서는 이에 대한 해답을 찾을 수 없었습니다. 그리고 제가 관찰하기에도 ‘프론트엔드 개발자’라는 타이틀을 가진 많은 유형의 개발자가 있기에, 혹시라도 각 입장이 원하는 것을 쉽게 설명할 수 있나 싶어 프론트엔드 스페셜리스트 분야들을 찾아보았습니다.</p><h6 id="프론트엔드-개발자"><a href="#프론트엔드-개발자" class="headerlink" title="프론트엔드 개발자"></a>프론트엔드 개발자</h6><p>일단 우리가 흔히 알고 있는 프론트엔드 개발자의 폭넓은 정의입니다. 무난하게 웹사이트를 만들 수 있습니다.</p><h6 id="프론트엔드-엔지니어"><a href="#프론트엔드-엔지니어" class="headerlink" title="프론트엔드 엔지니어"></a>프론트엔드 엔지니어</h6><p>그런데 전산이나 컴공쪽 공부하신 분이 자바스크립트를 하면 느낌이 좀 다른 경우가 많아서인지, 프론트엔드 엔지니어라는 분류도 있더라고요.</p><h6 id="퍼블리셔"><a href="#퍼블리셔" class="headerlink" title="퍼블리셔"></a>퍼블리셔</h6><p>주로 HTML과 CSS를 합니다. jQuery도 조금?</p><h6 id="프론트엔드-웹-디자이너"><a href="#프론트엔드-웹-디자이너" class="headerlink" title="프론트엔드 웹 디자이너"></a>프론트엔드 웹 디자이너</h6><p>기본적인 퍼블리싱이 되는 디자이너입니다. 요즘엔 생각보다 많아요.</p><h6 id="UI-UX-엔지니어"><a href="#UI-UX-엔지니어" class="headerlink" title="UI/UX 엔지니어"></a>UI/UX 엔지니어</h6><p>이름만 봐도 제너럴리스트 분야인데, 일반적으로 다른 직군보다 인터랙션 디자인을 깊게 다룹니다.</p><h6 id="모바일-태블릿-프론트엔드-개발자"><a href="#모바일-태블릿-프론트엔드-개발자" class="headerlink" title="모바일/태블릿 프론트엔드 개발자"></a>모바일/태블릿 프론트엔드 개발자</h6><p>모바일 개발자도 일종의 프론트엔드 개발자인데 네이티브 또는 웹으로 코딩하고 미디엄이 모바일 및 태블릿인 경우입니다.</p><h6 id="프론트엔드-SEO-전문가"><a href="#프론트엔드-SEO-전문가" class="headerlink" title="프론트엔드 SEO 전문가"></a>프론트엔드 SEO 전문가</h6><p>검색엔진 최적화도 깊게 판 고수들이 있습니다.</p><h6 id="프론트엔드-접근성-전문가"><a href="#프론트엔드-접근성-전문가" class="headerlink" title="프론트엔드 접근성 전문가"></a>프론트엔드 접근성 전문가</h6><p>WAI-ARIA 처럼 웹사이트의 구성이나 기능 등을 웹사이트를 보지 못해도 알 수 있게 해주는데 전력을 다하는 전문가입니다.</p><h6 id="프론트엔드-데브옵스"><a href="#프론트엔드-데브옵스" class="headerlink" title="프론트엔드 데브옵스"></a>프론트엔드 데브옵스</h6><p>어디서든 데브옵스는 협업할 때 필요한 툴을 잘 다루고 관리해줍니다.</p><h6 id="프론트엔드-테스팅-QA"><a href="#프론트엔드-테스팅-QA" class="headerlink" title="프론트엔드 테스팅/QA"></a>프론트엔드 테스팅/QA</h6><p>다양한 테스트의 전문가입니다. 작은 기업에서는 테스트를 거의 안 하죠.</p><p><img src="https://images.unsplash.com/photo-1512099053734-e6767b535838?ixlib=rb-1.2.1&amp;ixid=eyJhcHBfaWQiOjEyMDd9&amp;auto=format&amp;fit=crop&amp;w=1528&amp;q=80" alt="다양한 분야의 다양한 시각"><br>이렇게 유형을 정리해보니 디자이너는 내가 인터랙션 구현의 전문가이기를 바라고, 엔지니어는 내가 자바스크립트 전문가이기를 바라지만, 사실 나는 기본적인 프론트엔드 개발자인데 인터랙션 구현에 관심이 있는 사람이더라고요.</p><p>그럼 디자이너와 엔지니어가 원하는 UX 엔지니어와 프론트엔드 엔지니어의 직무 중 겹치는 부분을 찾아서 해보자고 생각했습니다. UX 엔지니어의 주 업무는 디자인 시스템을 기반으로 한 UI 패턴 라이브러리의 개발입니다. 이 일에는 마이크로인터랙션도 포함되어있죠. 그리고 프론트엔드 엔지니어는 프로젝트 관리, 성능 최적화 등 소프트웨어 공학과 연관이 깊은 일을 주로 합니다. 로딩이 비교적 빨라진다거나 유지보수 기간을 줄인다거나 하는 일인데 딱히 보여드리면서 설명하기는 힘든 부분이죠. 이렇게 UX 엔지니어의 작업 결과물은 보이는 것에 관한 것이고, 프론트엔드 엔지니어의 작업 결과물은 시간에 관한 것입니다. 이렇게 봐서는 겹치는 부분을 찾기가 매우 어렵네요.</p><p>그렇다면 앞서 말한 기호 시스템처럼 두 분야를 이어주는 개념이나 두 분야가 공유할 수 있는 최소한의 공통부분이 있나 찾아보겠습니다. UX 엔지니어는 기본적인 개발 말고도 인터랙션 디자인이라는 분야를 이해해야 하는데, 관련 학과에서는 시각화, 와이어프레임, 비디오, 그리고 애니메이션 등을 가르칩니다. 높은 코딩실력을 바탕으로 하는 프론트엔드 엔지니어는 전산이나 컴공 기초를 기본기로 생각할 수 있는데, 관련학과에서 데이터구조, 알고리즘, 아키텍처 등을 배울 수 있습니다. 와이어프레임, 비디오, 애니메이션과 데이터구조, 알고리즘, 아키텍처라니! 두 분야가 서로 겹치는 부분이 없어 보이니 ‘통섭’이라도 해야 할 텐데, 이것들을 모두 혼자 하려면 둘 다 공부해야겠네요? 4년제는 아니더라도 전문대 정도 기간의 수련기간을 가져야 기본 개념을 익힐 수 있다고 가정합시다. 2년 동안 기본교육에 더하여 2년 동안 실무에 관해 경험한다면 한 분야당 적어도 4년은 있어야 한다는 결론이 나옵니다. 그럼 양쪽 다 1년 정도의 기본기나 경험이 있다고 쳐도 제가 제너럴리스트가 되려면 최소 6년은 더 노력해야 한다는 생각을 했습니다. 그렇다면 기본기를 열심히 다지며 미래를 기약하는 수밖에!</p><p>그런데 속도가 아니라 방향이 중요하다고 하지 않습니까? 방향, 곧 추구하는 가치에서는 공통점을 찾을 수 있나 들여다봤습니다. UX 엔지니어의 주 업무인 UI 라이브러리의 개발배경에는 효율, 일관성, 그리고 확장성이라는 가치가 있습니다. 그리고 그 옆에 프론트엔드 개발자의 공학배경에서 효율, 정비성, 그리고 확장성이라는 가치를 놓고 보니, 효율과 확장성이라는 공통된 가치를 위해 UI 라이브러리 개발을 할 수 있다는 것을 알게되었습니다. 그래서 저는 지금 할 수 있는 일을 하자는 의미에서 UI 라이브러리 개발에 집중하게 되었습니다. 제너럴리스트가 되려는 노력이 결국 저를 UI 라이브러리 스페셜리스트의 길로 인도한 것은 아닌가 싶네요.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;이 글은 2019년 3월 16일에 &lt;a href=&quot;https://www.facebook.com/groups/System.out.Coding/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;코딩이랑 무관합니다만,&lt;/a&gt;에서 주최한 &lt;a href=&quot;https://festa.io/events/212&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;프론트엔드랑 무관합니다만,&lt;/a&gt; 행사에서 제가 “당신은 제너럴리스트입니까 스페셜리스트입니까?”라는 주제로 했던 발표의 내용을 정리한 것입니다.
    
    </summary>
    
      <category term="career" scheme="https://uxplus.dev/blog/categories/career/"/>
    
    
      <category term="generalist" scheme="https://uxplus.dev/blog/tags/generalist/"/>
    
      <category term="designer" scheme="https://uxplus.dev/blog/tags/designer/"/>
    
      <category term="developer" scheme="https://uxplus.dev/blog/tags/developer/"/>
    
      <category term="hybrid" scheme="https://uxplus.dev/blog/tags/hybrid/"/>
    
      <category term="ui libraries" scheme="https://uxplus.dev/blog/tags/ui-libraries/"/>
    
  </entry>
  
  <entry>
    <title>First Step Towards Product Success</title>
    <link href="https://uxplus.dev/blog/2019/04/27/first-step-towards-product-success/"/>
    <id>https://uxplus.dev/blog/2019/04/27/first-step-towards-product-success/</id>
    <published>2019-04-27T00:30:52.000Z</published>
    <updated>2019-05-16T04:37:13.075Z</updated>
    
    <content type="html"><![CDATA[<p>What is product success? If product strategy were anything like military tactics, a product would not lose a customer if it knew the customer and the product itself, <a id="more"></a>as adage from “The Art of War” by Sun Tzu suggests.</p><p>Economic principles reveal that people will trade money for what they believe is worth the cost. In other words, a successful product provides value desirable to customers. So how does one go about delivering this value?</p><p>The competitive edge of a company sets it apart from others. While undoubtedly significant for the company’s survival, many fall in the trap of thinking that refining this edge is the only key to product success.</p><p>Keep in mind that customer needs, not the product team’s strengths, ultimately define product value. For example, let’s imagine that you need a quick way to organize and store brushes of different sizes on the go while maximizing the brush lifespan. There are two solutions on the market: product A guarantees a ten year lifespan for the brushes but burdens the user at five kilograms while product B offers a nine year lifespan with a compact design at five-hundred grams. Which product would you buy?</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;What is product success? If product strategy were anything like military tactics, a product would not lose a customer if it knew the customer and the product itself,
    
    </summary>
    
      <category term="strategy" scheme="https://uxplus.dev/blog/categories/strategy/"/>
    
    
      <category term="product strategy" scheme="https://uxplus.dev/blog/tags/product-strategy/"/>
    
      <category term="design strategy" scheme="https://uxplus.dev/blog/tags/design-strategy/"/>
    
      <category term="ux" scheme="https://uxplus.dev/blog/tags/ux/"/>
    
  </entry>
  
  <entry>
    <title>Deploy a Hexo Blog to Your GitHub Pages</title>
    <link href="https://uxplus.dev/blog/2019/04/27/deploy-hexo-to-github-pages/"/>
    <id>https://uxplus.dev/blog/2019/04/27/deploy-hexo-to-github-pages/</id>
    <published>2019-04-26T17:13:26.000Z</published>
    <updated>2019-05-17T00:35:52.619Z</updated>
    
    <content type="html"><![CDATA[<p>While asking around for recommendations on blogging tools, I came across <a href="https://jekyllrb.com/" target="_blank" rel="noopener">Jekyll</a> and <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>. Both choices are popular, so it all came down to personal preference. <a id="more"></a>Well, Jekyll is based on Ruby and Hexo on Node.js. It didn’t take long before I decided that I would go with Hexo since I am more comfortable with JavaScript.</p><h2 id="Installing-Hexo"><a href="#Installing-Hexo" class="headerlink" title="Installing Hexo"></a>Installing Hexo</h2><p>Installation was a breeze because I already had the requirements installed.</p><h3 id="Requirements"><a href="#Requirements" class="headerlink" title="Requirements"></a>Requirements</h3><ul><li><a href="https://nodejs.org/en/" target="_blank" rel="noopener">Node.js</a></li><li><a href="https://git-scm.com/" target="_blank" rel="noopener">Git</a></li></ul><p>Once you have the requirements installed, simply run the following command on the command line to install Hexo:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -g hexo-cli</span><br></pre></td></tr></table></figure><h2 id="Initializing-Hexo"><a href="#Initializing-Hexo" class="headerlink" title="Initializing Hexo"></a>Initializing Hexo</h2><p>Once Hexo is installed, run the following commands in the target <code>folder</code>:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ hexo init &lt;folder&gt;</span><br><span class="line">$ <span class="built_in">cd</span> &lt;folder&gt;</span><br><span class="line">$ npm install</span><br></pre></td></tr></table></figure><h2 id="Installing-Plugins"><a href="#Installing-Plugins" class="headerlink" title="Installing Plugins"></a>Installing Plugins</h2><p>Install <a href="https://github.com/hexojs/hexo-deployer-git" target="_blank" rel="noopener"><code>hexo-deployer-git</code></a> plugin:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><h2 id="Configuring-Hexo"><a href="#Configuring-Hexo" class="headerlink" title="Configuring Hexo"></a>Configuring Hexo</h2><p>Find and open <code>_config.yml</code> to add the following adjustments:</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line"><span class="attr">  type:</span> <span class="string">git</span></span><br><span class="line"><span class="attr">  repo:</span> <span class="attr">https://username.github.io/blog</span></span><br><span class="line"><span class="attr">  branch:</span> <span class="string">gh-pages</span></span><br><span class="line"><span class="attr">  message:</span></span><br></pre></td></tr></table></figure><h2 id="Initializing-Git"><a href="#Initializing-Git" class="headerlink" title="Initializing Git"></a>Initializing Git</h2><p>Initialize Git by running the following command in the command line:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git init</span><br></pre></td></tr></table></figure><h2 id="Creating-a-GitHub-Repository"><a href="#Creating-a-GitHub-Repository" class="headerlink" title="Creating a GitHub Repository"></a>Creating a GitHub Repository</h2><p>Visit and log into <a href="https://github.com/" target="_blank" rel="noopener">GitHub</a> and make a new repository. Name the repository, check the <code>public</code> option, then click on <code>Create repository</code>.</p><h2 id="Adding-a-New-Remote"><a href="#Adding-a-New-Remote" class="headerlink" title="Adding a New Remote"></a>Adding a New Remote</h2><p>Take the remote URL from GitHub and put it in the following command as shown below:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git remote add origin git@github.com:username/blog.git</span><br></pre></td></tr></table></figure><h2 id="Generate-and-Deploy"><a href="#Generate-and-Deploy" class="headerlink" title="Generate and Deploy"></a>Generate and Deploy</h2><p>Now you can deploy your sample post by running the following commands:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>Voila!</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;While asking around for recommendations on blogging tools, I came across &lt;a href=&quot;https://jekyllrb.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Jekyll&lt;/a&gt; and &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;. Both choices are popular, so it all came down to personal preference.
    
    </summary>
    
      <category term="blog" scheme="https://uxplus.dev/blog/categories/blog/"/>
    
      <category term="Hexo" scheme="https://uxplus.dev/blog/categories/blog/Hexo/"/>
    
    
      <category term="development" scheme="https://uxplus.dev/blog/tags/development/"/>
    
      <category term="Hexo" scheme="https://uxplus.dev/blog/tags/Hexo/"/>
    
      <category term="blog" scheme="https://uxplus.dev/blog/tags/blog/"/>
    
      <category term="GitHub" scheme="https://uxplus.dev/blog/tags/GitHub/"/>
    
      <category term="GitHub Pages" scheme="https://uxplus.dev/blog/tags/GitHub-Pages/"/>
    
  </entry>
  
</feed>
