<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>UX + Development</title>
  
  <subtitle>= Love</subtitle>
  <link href="/blog/atom.xml" rel="self"/>
  
  <link href="https://uxplus.dev/blog/"/>
  <updated>2019-05-21T07:32:55.064Z</updated>
  <id>https://uxplus.dev/blog/</id>
  
  <author>
    <name>Seungmin Lee</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>버들붕어: 사육 및 번식하기</title>
    <link href="https://uxplus.dev/blog/2019/05/20/macropodus-ocellatus/"/>
    <id>https://uxplus.dev/blog/2019/05/20/macropodus-ocellatus/</id>
    <published>2019-05-20T13:17:42.407Z</published>
    <updated>2019-05-21T07:32:55.064Z</updated>
    
    <content type="html"><![CDATA[<!-- excerpt --></p><p>학명은 Macropodus Ocellatus, 흔히 버들붕어라 불리는 이 민물고기는 한국, 중국, 일본, 베트남, 그리고 러시아에 서식하고 있다. 주로 용수로, 습지, 논, 웅덩이, 개울, 그리고 큰 강의 후미 등 물흐름이 세지 않고 수초가 많은 곳에서 서식한다. 한국기후에 적응한 어류라 엄밀히 따지면 열대어임에도 불구하고 비교적 낮은 온도에서 잘 자란다. 몸길이는 5~7cm로, 수컷이 암컷보다 큰 지느러미를 가지고 있다<sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup>. 비슷한 어종으로는 같은 버들붕어과 속의 민물고기인 베타가 있다.</p><!-- toc --><h2>사육 하기</h2><p>버들붕어를 키울 어항은 수초항이라고 생각하며 꾸며도 될 만큼 숨을 돌과 유목 뿐만 아니라 부상 수초를 포함한 각종 수초가 있는 것이 좋다. 수온은 24도 정도가 적당하며, 겨울에는 10도 정도까지 떨어지게 해서 자연환경과 유사하게 해주는 것을 권장한다<sup class="footnote-ref"><a href="#fn2" id="fnref2">[2]</a></sup>. 쉽게 말해 실온으로 키우면 돼 히터가 따로 필요 없다.</p><h3>사료 주기</h3><p>야생에서 유충이나 작은 갑각류, 또는 치어 등을 포식하는 육식성 어종이기 때문에, 고단백질 사료를 줘야 한다. 주로 수면 부근에서 먹이활동을 하기 때문에 입 모양도 수면을 향해 있어, 수면에 오래 머무르는 알갱이 사료가 좋다. 간식으로는 건짱이나 브라인 쉬림프를 먹이면 된다.</p><h3>질병 예방하기</h3><p>외부 질환으로는 곰팡이, 세균감염으로 인해 발생하는 피부병, 내부 질환으로는 복합적인 원인에 의해 나타나는 복수병, 부레 이상이 흔하다<sup class="footnote-ref"><a href="#fn3" id="fnref3">[3]</a></sup>. 베타와 마찬가지로 자연에서 발견되는 환경 때문에 더러운 물에서 잘 산다는 오해가 있지만, 수질은 버들붕어의 내부 질환과 밀접한 관계가 있다. 이에 따라 수조 상태에 따라 다르지만, 월 2회 이상의 부분환수와 더불어 분기마다 바닥재 청소를 할 것을 권장한다. 또한 과식으로 인한 질병을 예방하기 위해 사료는 조금씩 자주 주고, 매주 간헐적 단식을 시키는 것이 좋다.</p><h3>사고 예방하기</h3><p>야생의 버들붕어는 물 밖으로 점프해서 먹이를 먹기도 하는데, 이 능력으로 인해 점프사로 죽는 경우가 꽤 있다고 한다. 그리고 이는 대부분 지나가는 하루살이를 먹으려다가 그러는 것이 아니라 수질이 안 좋거나, 순간 깜짝 놀랐거나, 심리적으로 불안한 경우에 일어나는 일이다<sup class="footnote-ref"><a href="#fn4" id="fnref4">[4]</a></sup>. 깨끗한 물과 충분한 수초, 특히 부상 수초가 점프사 예방에 탁월하니, 만약 부상 수초를 구하기가 힘들다면 수면을 덮으면서 동시에 물의 산성도도 잡아주는 아몬드 잎을 구해 물 위에 띄워보자.</p><h2>번식 하기</h2><p>이제 버들붕어를 번식시키는 법에 대해 알아보자. 버들붕어는 알을 위해 부상 수초 근처에 거품집을 지어 부화시키는 습성이 있고, 수온이 평상시보다 조금 높게 25도 이상으로 유지되는 6~7월에 활발하게 산란한다. 번식용 수조를 따로 준비해야 관리가 수월하다.</p><h3>번식용 수조 준비하기</h3><p>25 큐브 이상의 수조에 스펀지 여과기를 설치한다. 보다 쉬운 관리를 위해 바닥재는 넣지 않는다.</p><h3>암수 입수시키기</h3><p>무리 중에 가장 화려한 수컷과 가장 덩치가 크고 배가 부른 암컷을 준비한다. 동시에 입수시켜 텃세를 방지한다. 산란하는 동안 암수 모두 혼인색이 돌다가 산란을 마치는 순간 (암놈이 창백하게 변할 때), 암컷을 격리한다<sup class="footnote-ref"><a href="#fn5" id="fnref5">[5]</a></sup>.</p><h3>부화시키기</h3><p>산란 후 이틀 안에 200~300마리가 부화한다. 부화 후 4~5일 쯤 되면 수컷이 자어를 거품집으로 데려오기를 포기하며 치어들이 사방으로 흩어지기 시작하는데, 이때 수컷도 격리한다.</p><h3>먹이 주기</h3><p>부화 후 4일 정도는 난황을 흡수하기 때문에 5일째부터 준비한 브라인 새우나 로티퍼를 하루에 4~5번 이상 배가 차오르는 게 보일 정도로 준다. 먹이량 조절에 실패할 경우를 대비해 번식용 수조에 애플스네일, 우렁이 등 치어에게 무해한 청소 생물을 넣는다.</p><h3>청소하기</h3><p>3~4일에 한 번씩 스포이트로 치어를 분리한 후, 바닥 청소를 해준다. 같은 수온의 물로 빼낸 만큼 천천히 보충해준다.</p><p>위의 일을 하며 한 달 정도 번식용 수조에서 키우면 10mm 정도 크기가 되는데, 수조의 공간이 부족해지면 다른 수조로 옮겨서 기른다.</p><h2>개인 생각</h2><p>베타의 습성이 버들붕어의 습성과 많이 닮아있고, 버들붕어를 키우는 방법 면에서도 비슷한 점이 많아 베타를 키운 경험이 버들붕어를 키우는 데도 도움이 될 것이라 생각한다. 크게 다른 점이 있다면 베타는 영역을 확보하려는 습성이 매우 강해 특히 수컷의 경우 한 마리씩 격리해 키워야 하지만 버들붕어는 비슷한 성향을 가졌음에도 합사가 가능하다는 점이다. 그래도 나는 공간의 제약으로 베타처럼 한 마리만 키우는 시도를 하고 있다. 그리고 업으로 삼지 않는 이상 손이 많이 가는 번식은 힘들 것 같다.</p><hr class="footnotes-sep"><section class="footnotes"><ol class="footnotes-list"><li id="fn1" class="footnote-item"><p><a href="https://terms.naver.com/entry.nhn?cid=40942&amp;docId=1100550&amp;categoryId=32581" target="_blank" rel="noopener">버들붕어 </a> <a href="#fnref1" class="footnote-backref">↩</a></p></li><li id="fn2" class="footnote-item"><p><a href="http://www.tropical-fish-keeping.com/round-tailed-paradise-fish-macropodus-ocellatus.html" target="_blank" rel="noopener">Round Tailed Paradise Fish</a> <a href="#fnref2" class="footnote-backref">↩</a></p></li><li id="fn3" class="footnote-item"><p><a href="https://epician.tistory.com/151" target="_blank" rel="noopener">버들붕어 어종정보 정리</a> <a href="#fnref3" class="footnote-backref">↩</a></p></li><li id="fn4" class="footnote-item"><p><a href="http://blog.naver.com/baengin/220353120286" target="_blank" rel="noopener">버들붕어 </a> <a href="#fnref4" class="footnote-backref">↩</a></p></li><li id="fn5" class="footnote-item"><p><a href="https://epician.tistory.com/63" target="_blank" rel="noopener">버들붕어 번식 노하우 정리</a> <a href="#fnref5" class="footnote-backref">↩</a></p></li></ol></section>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;토종어종에 관심이 생겨 알아보던 중, 한국의 베타로 알려져있는 버들붕어를 키우게 되며 공부한 내용을 정리했다. 카멜레온처럼 색을 바꾸며 소통하는 이 개성있는 민물고기에 대해 알아보자.
    
    </summary>
    
      <category term="hobbies" scheme="https://uxplus.dev/blog/categories/hobbies/"/>
    
      <category term="fishkeeping" scheme="https://uxplus.dev/blog/categories/hobbies/fishkeeping/"/>
    
    
      <category term="freshwater fish" scheme="https://uxplus.dev/blog/tags/freshwater-fish/"/>
    
      <category term="민물고기" scheme="https://uxplus.dev/blog/tags/%EB%AF%BC%EB%AC%BC%EA%B3%A0%EA%B8%B0/"/>
    
      <category term="tropical fish" scheme="https://uxplus.dev/blog/tags/tropical-fish/"/>
    
      <category term="열대어" scheme="https://uxplus.dev/blog/tags/%EC%97%B4%EB%8C%80%EC%96%B4/"/>
    
      <category term="fish" scheme="https://uxplus.dev/blog/tags/fish/"/>
    
      <category term="어류" scheme="https://uxplus.dev/blog/tags/%EC%96%B4%EB%A5%98/"/>
    
      <category term="round-tailed paradise fish" scheme="https://uxplus.dev/blog/tags/round-tailed-paradise-fish/"/>
    
      <category term="버들붕어" scheme="https://uxplus.dev/blog/tags/%EB%B2%84%EB%93%A4%EB%B6%95%EC%96%B4/"/>
    
      <category term="macropodus ocellatus" scheme="https://uxplus.dev/blog/tags/macropodus-ocellatus/"/>
    
  </entry>
  
  <entry>
    <title>React 기초: 프로젝트 생성하기</title>
    <link href="https://uxplus.dev/blog/2019/05/15/react-basics-creating-a-project/"/>
    <id>https://uxplus.dev/blog/2019/05/15/react-basics-creating-a-project/</id>
    <published>2019-05-15T08:31:21.000Z</published>
    <updated>2019-05-20T14:03:34.554Z</updated>
    
    <content type="html"><![CDATA[<!-- excerpt --></p><!-- toc --><h2>개요</h2><p><a href="https://reactjs.org/" target="_blank" rel="noopener">React</a>는 유저 인터페이스를 만들기 위한 JavaScript 라이브러리이며, 컴포넌트와 컴포넌트가 어떻게 동작하는지 정의한다. 웹 환경에는 <a href="https://reactjs.org/docs/react-dom.html" target="_blank" rel="noopener">ReactDOM</a>, 모바일 환경에는 <a href="https://facebook.github.io/react-native/" target="_blank" rel="noopener">React Native</a> 등, 각 플랫폼에 맞는 렌더링 담당 패키지를 React와 함께 사용할 수 있다. 이렇게 React는 관심사의 분리를 통해 다양한 플랫폼에서 쓰기 편한 구조로 설계되어있다. 이 시리즈는 웹개발에 대한 내용을 다루므로, React와 ReactDOM의 조합을 사용한다.</p><h2>개발 환경</h2><p>리액트로 웹 프로젝트를 개발할 때 간단한 맛보기를 위해서는 <a href="https://gist.github.com/gaearon/6668a1f6986742109c00a581ce704605" target="_blank" rel="noopener">웹사이트에 React를 추가</a>하는 방법이 있다. 하지만 대부분의 경우, 용도에 걸맞는 <a href="https://reactjs.org/docs/create-a-new-react-app.html" target="_blank" rel="noopener">툴체인을 사용</a>한다.  툴체인이란 프로젝트를 생성하기 위해 서로 연결되어있는 도구들의 모음이다. 흔히 패키지 매니저(<a href="https://yarnpkg.com/en/" target="_blank" rel="noopener">Yarn</a> 또는 <a href="https://www.npmjs.com/" target="_blank" rel="noopener">npm</a>), 번들러(<a href="https://webpack.js.org/" target="_blank" rel="noopener">webpack</a> 또는 <a href="https://parceljs.org/" target="_blank" rel="noopener">Parcel</a>), 그리고 컴파일러(<a href="https://babeljs.io/" target="_blank" rel="noopener">Babel</a>)의 조합으로 구성되어있다. 그렇다면 기초에 집중하기 쉬운 환경인 <a href="https://github.com/facebook/create-react-app" target="_blank" rel="noopener">Create React App</a>으로 프로젝트를 생성해보자.</p><h2>시작하기</h2><h3>요구조건</h3><ul><li>로컬 컴퓨터에 Node 8.10.0 이상</li><li>npx (npm 5.2 이상), npm (Node와 함께 설치), 또는 Yarn (0.25 이상)</li></ul><h3>프로젝트 생성</h3><p>요구 조건을 모두 갖췄다면 npx, npm, 또는 Yarn 중 하나를 선택해 다음의 명령어로 현재 위치에 <code>my-app</code>이라는 프로젝트 폴더를 생성해보자.</p><h4>npx</h4><pre><code class="language-bash">npx create-react-app my-app</code></pre><h4>npm</h4><pre><code class="language-bash">npm init react-app my-app</code></pre><h4>Yarn</h4><pre><code class="language-bash">yarn create react-app my-app</code></pre><h3>프로젝트 구조</h3><p>생성된 프로젝트의 구조를 살펴보면 다음과 같다:</p><pre><code class="language-none">my-app├── README.md├── node_modules├── package.json├── .gitignore├── public│   ├── favicon.ico│   ├── index.html│   └── manifest.json└── src    ├── App.css    ├── App.js    ├── App.test.js    ├── index.css    ├── index.js    ├── logo.svg    └── serviceWorker.js</code></pre><ul><li><a href="http://README.md" target="_blank" rel="noopener">README.md</a><ul><li>프로젝트 목표 및 사용법 등을 설명</li></ul></li><li>node_modules<ul><li>프로젝트가 사용하는 패키지</li><li>용량이 커서 .gitignore에 이 폴더를 추가하는 경우가 흔하다</li></ul></li><li><a href="https://docs.npmjs.com/files/package.json" target="_blank" rel="noopener">package.json</a><ul><li>프로젝트 정보</li><li>프로젝트에 사용되는 패키지에 대한 정보를 가지고 있기 때문에 다른 컴퓨터에서 필요한 패키지를 직접 다운로드 받게할 수 있다</li></ul></li><li><a href="https://git-scm.com/docs/gitignore" target="_blank" rel="noopener">.gitignore</a><ul><li>일부러 신경쓰지 않는 파일의 관리</li></ul></li><li>public<ul><li>정적 파일 (이미지 등)을 담아두는 공간</li></ul></li><li>src<ul><li>소스코드를 담아두는 공간</li></ul></li></ul><h3>프로젝트 실행</h3><p>다음 명령어를 통해 프로젝트 폴더로 이동한다.</p><pre><code class="language-bash">cd my-app</code></pre><p>그리고 사용하는 패키지 매니저에 따라 <code>npm start</code> 또는 <code>yarn start</code> 명령을 통해 개발모드로 실행한다. 이 프로세스는 여느 프로세스와 마찬가지로 <code>ctrl + c</code> 명령으로 종료할 수 있다. 보다 상세한 설명은 <a href="https://github.com/facebook/create-react-app" target="_blank" rel="noopener">공식 README.md</a>에서 확인할 수 있다.</p><h2>모듈 시스템</h2><p>앞서 툴체인에는 흔히 Babel이라는 컴파일러가 포함되어있다고 언급했다. 이는 자바스크립트의 표준인 ECMAScript 중에서도 ES2015(ES6) 이상으로 코드를 짜도 브라우저가 처리할 수 있게하기 위함이다. 하지만 필요한 패키지를 찾아서 쓰다보면 가끔 <code>[...] has no default export</code>이라는 에러메시지를 만날 때가 있다. 이는 아마도 그 패키지가 다른 모듈 시스템(CommonJS)을 사용하고 있어서일것이다. 이 둘을 비교해 보면 다음과 같다:</p><table><thead><tr><th>CommonJS 모듈 시스템 (Node.js)</th><th>ES6 모듈 시스템</th></tr></thead><tbody><tr><td>require (node_modules에서 해당 모듈을 찾는다)</td><td>import</td></tr><tr><td>module.exports</td><td>export</td></tr></tbody></table><p>하지만 현재 Babel은 <code>import</code>와 <code>export</code>를 컴파일 할 수 있고, <a href="https://nodejs.org/api/esm.html#esm_no_code_require_code_code_exports_code_code_module_exports_code_code_filename_code_code_dirname_code" target="_blank" rel="noopener">Node.js v12.2.0</a>에서는 import를 지원한다. 그러므로 CommonJS 모듈 시스템을 사용하는 패키지는 관리가 안되고 있을 가능성이 높고 그 와중에 비슷한 기능의 다른 패키지가 생겼을 가능성이 높으므로 대안도 고민해볼만하다.</p><p>이제 Create React App으로 생성한 프로젝트 구성에 대해 알았으니 다음에는 리액트 컴포넌트에 대해 알아보자.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;React를 이용한 개발을 시작해보고 싶지만 어디부터 시작해야할지 몰라 헤메고 있는 분을 위해 React의 정의, 개발 환경, create-react-app으로 프로젝트를 생성하는 방법, 그리고 모듈 시스템에 대한 기초적인 부분을 살펴본다.
    
    </summary>
    
      <category term="JavaScript" scheme="https://uxplus.dev/blog/categories/JavaScript/"/>
    
      <category term="React" scheme="https://uxplus.dev/blog/categories/JavaScript/React/"/>
    
    
      <category term="JavaScript" scheme="https://uxplus.dev/blog/tags/JavaScript/"/>
    
      <category term="React" scheme="https://uxplus.dev/blog/tags/React/"/>
    
      <category term="web development" scheme="https://uxplus.dev/blog/tags/web-development/"/>
    
      <category term="Babel" scheme="https://uxplus.dev/blog/tags/Babel/"/>
    
      <category term="CommonJS" scheme="https://uxplus.dev/blog/tags/CommonJS/"/>
    
      <category term="ES6" scheme="https://uxplus.dev/blog/tags/ES6/"/>
    
      <category term="ES2015" scheme="https://uxplus.dev/blog/tags/ES2015/"/>
    
      <category term="create-react-app" scheme="https://uxplus.dev/blog/tags/create-react-app/"/>
    
      <category term="Create React App" scheme="https://uxplus.dev/blog/tags/Create-React-App/"/>
    
      <category term="module systems" scheme="https://uxplus.dev/blog/tags/module-systems/"/>
    
  </entry>
  
  <entry>
    <title>제너럴리스트로 가는 길</title>
    <link href="https://uxplus.dev/blog/2019/04/27/becoming-a-generalist/"/>
    <id>https://uxplus.dev/blog/2019/04/27/becoming-a-generalist/</id>
    <published>2019-04-27T01:02:07.000Z</published>
    <updated>2019-05-21T06:12:24.619Z</updated>
    
    <content type="html"><![CDATA[<!-- excerpt --></p><p>저는 학교에서 디자인을 전공했습니다. 와이어프레임도 만들어보고 그래픽 툴도 다뤄보고, 조금이지만 모션 그래픽도 해보았는데요. 물론 이런 것들은 제가 받은 교육의 결과물이고, 어떤 기준으로 이런 결과물을 만들어야 하는지 위주로 디자인을 배웠습니다. 졸업 후엔 디자이너로 취업을 했고요.</p><p>사실 취업하기 전에 개인 포트폴리오를 만들어보려고 ‘퍼블리싱’이라고 불리는 것을 배웠습니다. 그때는 일반적으로 HTML, CSS, 그리고 jQuery정도를 할 줄 아는 사람을 퍼블리셔라고 불렀던 것 같아요. 그런데 작은 기업에서 일을 하다 보니 일손이 부족해 api 연결 등을 하나둘씩 했고, 어느 순간 프론트엔드 개발자로 전향한 자신을 발견했습니다.</p><blockquote><p>“Technology alone is not enough. It’s technology married with the liberal arts, married with the humanities, that yields us the results that make our hearts sing.”</p></blockquote><p>재학 당시 들었던 스티브 잡스의 이 한 마디가 세계적인 트렌드를 일으켰습니다. 2011년 3월, 애플 아이패드 2 키노트에서 했던 이야기인데요. 기술과 인문학의 융합이 화제가 되며 여러 대학에서 융합형 인재를 키울 목적으로 전형을 신설하는 등의 일이 있었고, 저도 ‘대세’인 융합형 인재, 곧 제너럴리스트가 되고 싶었습니다.</p><p>융합이 화두가 되기 전에도 ‘통섭’이라는 개념이 있었습니다. 1998년에 출판된 &lt;통섭: 지식의 통합(E.O.윌슨)&gt;에서는 자연학과 인문학 등 여러 분야의 전문가가 하나의 연구를 함께 하면서 서로 시야를 공유하는 것의 중요성을 이야기하고 있습니다.</p><p>그보다 더 거슬러 올라가 1968년작 &lt;예술의 언어들: 기호 이론을 향하여(넬슨 굿맨)&gt;에서는 예술도 자연과학에 쓰이는 기호처럼 의사소통이나 표현방식이라는 관점도 있었습니다. 이렇게 서로 만날 일이 전혀 없어 보이는 분야도 자세히 살폈을 때 닮은꼴이라면, 그 연결고리의 전문가가 곧 제너럴리스트는 아닌가 하는 생각을 해봤습니다.</p><p><img src="https://cdn-images-1.medium.com/max/1200/0*zFj5ZUImAVahWR9C" alt="디자인 머리와 개발 머리"><br>디자인을 넘어 개발도 이해하는 제너럴리스트가 되기 위해 담당업무 분야도 바꾸고 다양한 개발자 모임에 참여했습니다. 그 결과 디자이너 및 개발자 양쪽 모두와 의사소통하고 공감할 수 있었습니다. 그리고 디자인과 개발, 양쪽을 이해하는 제너럴리스트의 역할은 중간에서 양쪽 모두와 협력하는 것이라고 생각했습니다. 매우 이상적이죠.</p><p>하지만 시간도 부족한데 가치의 충돌이 일어나는 것이 일상이었습니다. 사용자에게 최적화된 커스텀 디자인을 입힐것안지 아니면 이미 개발되어있는 것에 디자인을 맞출 것인지 협의하는 과정에서 저는 고통을 겪어야만 했습니다. 왜냐하면, 저는 둘 다 중요하다고 생각하지만 하나에 집중해야만 하는 상황에 자주 놓이게 되었기 때문이죠. 선택의 고통을 즐길 준비가 된 분은 제너럴리스트의 길도 잘 감당하시리라 생각됩니다. 물론 저는 이 고통을 즐길 정도로 초월한 사람은 아니라 꽤 괴로웠습니다.</p><p>그래도 제너럴리스트가 하고 싶었습니다. 왜냐하면, 저는 호기심이 많은 성격이며 한 가지만 계속 반복하는 것을 견디지 못하기 때문입니다. 성격과 직업만족도가 서로 의미있는 관계가 있다는 관련 논문들이 제 생각을 뒷받침해주었습니다. 성격과 직업에서 요구되는 능력이 잘 맞으면 조금이라도 더 행복해질 것 같았습니다. 그래서 선택의 괴로움은 저의 능력이 뒷받침되면 점차 사라지리라 믿으며 제너럴리스트의 길을 선택했습니다.</p><p>일단 현실적으로 요구되는 제너럴리스트와 제가 되고 싶은 제너럴리스트를 정의할 필요를 느꼈습니다. 디자인 팀이 나에게 원하는 것, 그리고 엔지니어들이 나에게 바라는 것은 뭘까? 나는 내가 무엇이라고 생각하며, 앞으로는 어떤 사람이 되고 싶은가? 한때 스페셜리스트 분야라고 생각했던 ‘프론트엔드’에서는 이에 대한 해답을 찾을 수 없었습니다. 그리고 제가 관찰하기에도 ‘프론트엔드 개발자’라는 타이틀을 가진 많은 유형의 개발자가 있기에, 혹시라도 각 입장이 원하는 것을 쉽게 설명할 수 있나 싶어 프론트엔드 스페셜리스트 분야들을 찾아보았습니다.</p><h6>프론트엔드 개발자</h6><p>일단 우리가 흔히 알고 있는 프론트엔드 개발자의 폭넓은 정의입니다. 무난하게 웹사이트를 만들 수 있습니다.</p><h6>프론트엔드 엔지니어</h6><p>그런데 전산이나 컴공쪽 공부하신 분이 자바스크립트를 하면 느낌이 좀 다른 경우가 많아서인지, 프론트엔드 엔지니어라는 분류도 있더라고요.</p><h6>퍼블리셔</h6><p>주로 HTML과 CSS를 합니다. jQuery도 조금?</p><h6>프론트엔드 웹 디자이너</h6><p>기본적인 퍼블리싱이 되는 디자이너입니다. 요즘엔 생각보다 많아요.</p><h6>UI/UX 엔지니어</h6><p>이름만 봐도 제너럴리스트 분야인데, 일반적으로 다른 직군보다 인터랙션 디자인을 깊게 다룹니다.</p><h6>모바일/태블릿 프론트엔드 개발자</h6><p>모바일 개발자도 일종의 프론트엔드 개발자인데 네이티브 또는 웹으로 코딩하고 미디엄이 모바일 및 태블릿인 경우입니다.</p><h6>프론트엔드 SEO 전문가</h6><p>검색엔진 최적화도 깊게 판 고수들이 있습니다.</p><h6>프론트엔드 접근성 전문가</h6><p>WAI-ARIA 처럼 웹사이트의 구성이나 기능 등을 웹사이트를 보지 못해도 알 수 있게 해주는데 전력을 다하는 전문가입니다.</p><h6>프론트엔드 데브옵스</h6><p>어디서든 데브옵스는 협업할 때 필요한 툴을 잘 다루고 관리해줍니다.</p><h6>프론트엔드 테스팅/QA</h6><p>다양한 테스트의 전문가입니다. 작은 기업에서는 테스트를 거의 안 하죠.</p><p><img src="https://images.unsplash.com/photo-1512099053734-e6767b535838?ixlib=rb-1.2.1&amp;ixid=eyJhcHBfaWQiOjEyMDd9&amp;auto=format&amp;fit=crop&amp;w=1528&amp;q=80" alt="다양한 분야의 다양한 시각"><br>이렇게 유형을 정리해보니 디자이너는 내가 인터랙션 구현의 전문가이기를 바라고, 엔지니어는 내가 자바스크립트 전문가이기를 바라지만, 사실 나는 기본적인 프론트엔드 개발자인데 인터랙션 구현에 관심이 있는 사람이더라고요.</p><p>그럼 디자이너와 엔지니어가 원하는 UX 엔지니어와 프론트엔드 엔지니어의 직무 중 겹치는 부분을 찾아서 해보자고 생각했습니다. UX 엔지니어의 주 업무는 디자인 시스템을 기반으로 한 UI 패턴 라이브러리의 개발입니다. 이 일에는 마이크로인터랙션도 포함되어있죠. 그리고 프론트엔드 엔지니어는 프로젝트 관리, 성능 최적화 등 소프트웨어 공학과 연관이 깊은 일을 주로 합니다. 로딩이 비교적 빨라진다거나 유지보수 기간을 줄인다거나 하는 일인데 딱히 보여드리면서 설명하기는 힘든 부분이죠. 이렇게 UX 엔지니어의 작업 결과물은 보이는 것에 관한 것이고, 프론트엔드 엔지니어의 작업 결과물은 시간에 관한 것입니다. 이렇게 봐서는 겹치는 부분을 찾기가 매우 어렵네요.</p><p>그렇다면 앞서 말한 기호 시스템처럼 두 분야를 이어주는 개념이나 두 분야가 공유할 수 있는 최소한의 공통부분이 있나 찾아보겠습니다. UX 엔지니어는 기본적인 개발 말고도 인터랙션 디자인이라는 분야를 이해해야 하는데, 관련 학과에서는 시각화, 와이어프레임, 비디오, 그리고 애니메이션 등을 가르칩니다. 높은 코딩실력을 바탕으로 하는 프론트엔드 엔지니어는 전산이나 컴공 기초를 기본기로 생각할 수 있는데, 관련학과에서 데이터구조, 알고리즘, 아키텍처 등을 배울 수 있습니다. 와이어프레임, 비디오, 애니메이션과 데이터구조, 알고리즘, 아키텍처라니! 두 분야가 서로 겹치는 부분이 없어 보이니 ‘통섭’이라도 해야 할 텐데, 이것들을 모두 혼자 하려면 둘 다 공부해야겠네요? 4년제는 아니더라도 전문대 정도 기간의 수련기간을 가져야 기본 개념을 익힐 수 있다고 가정합시다. 2년 동안 기본교육에 더하여 2년 동안 실무에 관해 경험한다면 한 분야당 적어도 4년은 있어야 한다는 결론이 나옵니다. 그럼 양쪽 다 1년 정도의 기본기나 경험이 있다고 쳐도 제가 제너럴리스트가 되려면 최소 6년은 더 노력해야 한다는 생각을 했습니다. 그렇다면 기본기를 열심히 다지며 미래를 기약하는 수밖에!</p><p>그런데 속도가 아니라 방향이 중요하다고 하지 않습니까? 방향, 곧 추구하는 가치에서는 공통점을 찾을 수 있나 들여다봤습니다. UX 엔지니어의 주 업무인 UI 라이브러리의 개발배경에는 효율, 일관성, 그리고 확장성이라는 가치가 있습니다. 그리고 그 옆에 프론트엔드 개발자의 공학배경에서 효율, 정비성, 그리고 확장성이라는 가치를 놓고 보니, 효율과 확장성이라는 공통된 가치를 위해 UI 라이브러리 개발을 할 수 있다는 것을 알게되었습니다. 그래서 저는 지금 할 수 있는 일을 하자는 의미에서 UI 라이브러리 개발에 집중하게 되었습니다. 제너럴리스트가 되려는 노력이 결국 저를 UI 라이브러리 스페셜리스트의 길로 인도한 것은 아닌가 싶네요.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;2019년 3월 16일에 &lt;a href=&quot;https://www.facebook.com/groups/System.out.Coding/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;코딩이랑 무관합니다만,&lt;/a&gt;에서 주최한 &lt;a href=&quot;https://festa.io/events/212&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;프론트엔드랑 무관합니다만,&lt;/a&gt; 행사에서 &amp;quot;당신은 제너럴리스트입니까 스페셜리스트입니까?&amp;quot;라는 주제로 했던 발표의 내용을 글로 정리했다.
    
    </summary>
    
      <category term="career" scheme="https://uxplus.dev/blog/categories/career/"/>
    
    
      <category term="generalist" scheme="https://uxplus.dev/blog/tags/generalist/"/>
    
      <category term="designer" scheme="https://uxplus.dev/blog/tags/designer/"/>
    
      <category term="developer" scheme="https://uxplus.dev/blog/tags/developer/"/>
    
      <category term="hybrid" scheme="https://uxplus.dev/blog/tags/hybrid/"/>
    
      <category term="ui libraries" scheme="https://uxplus.dev/blog/tags/ui-libraries/"/>
    
  </entry>
  
  <entry>
    <title>First Step Towards Product Success</title>
    <link href="https://uxplus.dev/blog/2019/04/27/first-step-towards-product-success/"/>
    <id>https://uxplus.dev/blog/2019/04/27/first-step-towards-product-success/</id>
    <published>2019-04-27T00:30:52.000Z</published>
    <updated>2019-05-17T04:56:03.552Z</updated>
    
    <content type="html"><![CDATA[<p>What is product success? If product strategy were anything like military tactics, a product would not lose a customer if it knew the customer and the product itself, <a id="more"></a>as adage from “The Art of War” by Sun Tzu suggests.</p><p>Economic principles reveal that people will trade money for what they believe is worth the cost. In other words, a successful product provides value desirable to customers. So how does one go about delivering this value?</p><p>The competitive edge of a company sets it apart from others. While undoubtedly significant for the company’s survival, many fall in the trap of thinking that refining this edge is the only key to product success.</p><p>Keep in mind that customer needs, not the product team’s strengths, ultimately define product value. For example, let’s imagine that you need a quick way to organize and store brushes of different sizes on the go while maximizing the brush lifespan. There are two solutions on the market: product A guarantees a ten year lifespan for the brushes but burdens the user at five kilograms while product B offers a nine year lifespan with a compact design at five-hundred grams. Which product would you buy?</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;What is product success? If product strategy were anything like military tactics, a product would not lose a customer if it knew the customer and the product itself,
    
    </summary>
    
      <category term="strategy" scheme="https://uxplus.dev/blog/categories/strategy/"/>
    
    
      <category term="product strategy" scheme="https://uxplus.dev/blog/tags/product-strategy/"/>
    
      <category term="design strategy" scheme="https://uxplus.dev/blog/tags/design-strategy/"/>
    
      <category term="ux" scheme="https://uxplus.dev/blog/tags/ux/"/>
    
  </entry>
  
  <entry>
    <title>Deploy a Hexo Blog to Your GitHub Pages</title>
    <link href="https://uxplus.dev/blog/2019/04/27/deploy-hexo-to-github-pages/"/>
    <id>https://uxplus.dev/blog/2019/04/27/deploy-hexo-to-github-pages/</id>
    <published>2019-04-26T17:13:26.000Z</published>
    <updated>2019-05-17T05:02:49.974Z</updated>
    
    <content type="html"><![CDATA[<p>While asking around for recommendations on blogging tools, I came across <a href="https://jekyllrb.com/" target="_blank" rel="noopener">Jekyll</a>,  <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>, and <a href="https://www.gatsbyjs.org/" target="_blank" rel="noopener">Gatsby</a>. All of these choices are popular, so it all came down to personal preference. <a id="more"></a>Well, Jekyll is based on Ruby and Hexo and Gatsby on Node.js. Considering that I am more comfortable with JavaScript, I wanted to go with either Hexo or Gatsby. There was one more thing to consider, though - the degree of freedom. I didn’t need the freedom Gatsby offered, and before long, I had this blog up and running.</p><h2>Installing Hexo</h2><p>Installation was a breeze because I already had the requirements installed.</p><h3>Requirements</h3><ul><li><a href="https://nodejs.org/en/" target="_blank" rel="noopener">Node.js</a></li><li><a href="https://git-scm.com/" target="_blank" rel="noopener">Git</a></li></ul><p>Once you have the requirements installed, simply run the following command on the command line to install Hexo:</p><pre><code class="language-bash">$ npm install -g hexo-cli</code></pre><h2>Initializing Hexo</h2><p>Once Hexo is installed, run the following commands in the target <code>folder</code>:</p><pre><code class="language-bash">$ hexo init &lt;folder&gt;$ cd &lt;folder&gt;$ npm install</code></pre><h2>Installing Plugins</h2><p>Install <a href="https://github.com/hexojs/hexo-deployer-git" target="_blank" rel="noopener"><code>hexo-deployer-git</code></a> plugin:</p><pre><code class="language-bash">$ npm install hexo-deployer-git --save</code></pre><h2>Configuring Hexo</h2><p>Find and open <code>_config.yml</code> to add the following adjustments:</p><pre><code class="language-yml">deploy:  type: git  repo: https://username.github.io/blog  branch: gh-pages  message:</code></pre><h2>Initializing Git</h2><p>Initialize Git by running the following command in the command line:</p><pre><code class="language-bash">$ git init</code></pre><h2>Creating a GitHub Repository</h2><p>Visit and log into <a href="https://github.com/" target="_blank" rel="noopener">GitHub</a> and make a new repository. Name the repository, check the <code>public</code> option, then click on <code>Create repository</code>.</p><h2>Adding a New Remote</h2><p>Take the remote URL from GitHub and put it in the following command as shown below:</p><pre><code class="language-bash">$ git remote add origin git@github.com:username/blog.git</code></pre><h2>Generate and Deploy</h2><p>Now you can deploy your sample post by running the following commands:</p><pre><code class="language-bash">$ hexo generate$ hexo deploy</code></pre><p>Voila!</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;While asking around for recommendations on blogging tools, I came across &lt;a href=&quot;https://jekyllrb.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Jekyll&lt;/a&gt;,  &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;, and &lt;a href=&quot;https://www.gatsbyjs.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Gatsby&lt;/a&gt;. All of these choices are popular, so it all came down to personal preference.
    
    </summary>
    
      <category term="blog" scheme="https://uxplus.dev/blog/categories/blog/"/>
    
      <category term="Hexo" scheme="https://uxplus.dev/blog/categories/blog/Hexo/"/>
    
    
      <category term="development" scheme="https://uxplus.dev/blog/tags/development/"/>
    
      <category term="Hexo" scheme="https://uxplus.dev/blog/tags/Hexo/"/>
    
      <category term="blog" scheme="https://uxplus.dev/blog/tags/blog/"/>
    
      <category term="GitHub" scheme="https://uxplus.dev/blog/tags/GitHub/"/>
    
      <category term="GitHub Pages" scheme="https://uxplus.dev/blog/tags/GitHub-Pages/"/>
    
  </entry>
  
</feed>
